// deepgram.js
const { WebSocketServer } = require('ws');
const { createClient, LiveTranscriptionEvents } = require('@deepgram/sdk');

const deepgramApiKey = process.env.DEEPGRAM_API_KEY;
if (!deepgramApiKey) {
  throw new Error("Missing DEEPGRAM_API_KEY in environment variables");
}

const deepgramClient = createClient(deepgramApiKey);

function startWebSocketServer(server) {
  const wss = new WebSocketServer({ server });

  wss.on('connection', (ws) => {
    console.log("üîó Client connected to WebSocket");

    let deepgram = null;
    let dgOpen = false;
    let keepAliveTimer = null;

    // ◊†◊ê◊í◊® ◊õ◊ê◊ü ◊ê◊ï◊ì◊ô◊ï ◊ê◊ù ◊î÷æDG ◊ú◊ê ◊§◊™◊ï◊ó ◊õ◊®◊í◊¢
    const pendingAudio = [];

    // ◊ó◊©◊ï◊ë ◊ú◊î◊™◊ê◊ô◊ù ◊ú◊§◊ï◊®◊û◊ò ◊©◊û◊í◊ô◊¢ ◊û◊î◊ì◊§◊ì◊§◊ü (MediaRecorder: audio/webm;codecs=opus @48kHz)
    const DG_OPTIONS = {
      model: 'nova-3',
      language: 'en-US',
      smart_format: true,
      punctuate: true,
      interim_results: true,
      endpointing: 500,
      vad_events: true,
      encoding: 'webm',   // ‚úÖ ◊ß◊®◊ô◊ò◊ô ◊ú-webm/opus
      sample_rate: 48000, // ‚úÖ MediaRecorder ◊ë◊ì◊®◊ö ◊õ◊ú◊ú 48kHz
      channels: 1
    };

    const openDeepgram = () => {
      deepgram = deepgramClient.listen.live(DG_OPTIONS);

      deepgram.addListener(LiveTranscriptionEvents.Open, () => {
        dgOpen = true;

        // ◊û◊®◊ï◊ß◊†◊ô◊ù ◊ê◊™ ◊î◊™◊ï◊® ◊©◊†◊ê◊í◊®
        while (pendingAudio.length) {
          deepgram.send(pendingAudio.shift());
        }

        // keepAlive ◊¢◊ì◊ô◊ü ◊õ◊ú 25 ◊©◊†◊ô◊ï◊™ ◊ï◊ú◊ú◊ê ◊°◊§◊ê◊ù ◊ú◊ï◊í◊ô◊ù
        clearInterval(keepAliveTimer);
        keepAliveTimer = setInterval(() => {
          if (deepgram && deepgram.getReadyState && deepgram.getReadyState() === WebSocket.OPEN) {
            deepgram.keepAlive();
          }
        }, 25_000);

        console.log("deepgram: connected");
      });

      deepgram.addListener(LiveTranscriptionEvents.Transcript, (data) => {
        // ◊©◊ï◊ú◊ó◊ô◊ù ◊ú◊ú◊ß◊ï◊ó ‚Äì ◊õ◊ï◊ú◊ú interim/final
        ws.send(JSON.stringify(data));
      });

      deepgram.addListener(LiveTranscriptionEvents.Metadata, (data) => {
        // ◊©◊û◊ô◊© ◊ú◊ì◊ô◊ë◊ï◊í ◊ë◊¶◊ì ◊ú◊ß◊ï◊ó ◊ê◊ù ◊™◊®◊¶◊î
        ws.send(JSON.stringify({ metadata: data }));
      });

      deepgram.addListener(LiveTranscriptionEvents.Warning, (warning) => {
        console.warn("deepgram: warning", warning);
      });

      deepgram.addListener(LiveTranscriptionEvents.Error, (error) => {
        console.error("deepgram: error", error);
        // ◊ú◊ê ◊°◊ï◊í◊®◊ô◊ù ◊ê◊™ ws ◊©◊ú ◊î◊ú◊ß◊ï◊ó; ◊†◊ê◊§◊©◊® ◊®◊ô◊ß◊ï◊†◊ß◊ò ◊ë◊©◊ú◊ô◊ó◊™ ◊ê◊ï◊ì◊ô◊ï ◊î◊ë◊ê
        dgOpen = false;
      });

      deepgram.addListener(LiveTranscriptionEvents.Close, () => {
        console.log("deepgram: disconnected");
        dgOpen = false;
        clearInterval(keepAliveTimer);
        // ◊ú◊ê ◊°◊ï◊í◊®◊ô◊ù ◊ê◊™ ws ◊ú◊ú◊ß◊ï◊ó. ◊†◊§◊™◊ó ◊û◊ó◊ì◊© ◊õ◊©◊ô◊í◊ô◊¢ ◊ê◊ï◊ì◊ô◊ï (◊®◊ê◊î ws.on('message'))
      });
    };

    // ◊§◊™◊ô◊ó◊™ ◊ó◊ô◊ë◊ï◊® ◊®◊ê◊©◊ï◊†◊ô ◊ú-DG
    openDeepgram();

    ws.on('message', (message) => {
      // message ◊û◊í◊ô◊¢ ◊õ-ArrayBuffer (webm/opus)
      if (!deepgram) {
        openDeepgram();
      }

      if (deepgram.getReadyState && deepgram.getReadyState() === WebSocket.OPEN && dgOpen) {
        deepgram.send(message);
      } else {
        // ◊†◊ê◊í◊® ◊¢◊ì ◊©◊î◊ó◊ô◊ë◊ï◊® ◊ô◊ô◊§◊™◊ó ◊û◊ó◊ì◊©
        pendingAudio.push(message);

        // ◊ê◊ù ◊î◊ó◊ô◊ë◊ï◊® ◊î◊ô◊î CLOSED/CLOSING ‚Äì ◊†◊§◊™◊ó ◊û◊ó◊ì◊©
        if (deepgram.getReadyState && deepgram.getReadyState() >= 2) {
          console.log("deepgram: reconnecting...");
          try {
            deepgram.removeAllListeners();
            deepgram.finish();
          } catch (_) {}
          openDeepgram();
        }
      }
    });

    ws.on('close', () => {
      console.log("‚ùå Client disconnected");
      clearInterval(keepAliveTimer);
      try {
        if (deepgram) {
          deepgram.removeAllListeners();
          deepgram.finish();
        }
      } catch (_) {}
      deepgram = null;
      dgOpen = false;
    });
  });
}

module.exports = startWebSocketServer;
